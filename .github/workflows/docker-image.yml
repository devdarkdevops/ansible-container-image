name: Docker Image CI
on: [push]

env:
  TAG_NAME: latest
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ansible
  ARTIFACT_NAME: ansible-container-image
  TRIVY_VERSION: 0.22.0
  TRIVY_REPORT_FILE_PATH: pages/tools/ansible
  GIT_REPO_NAME: result-of-vulneralibity-scan

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build image and export
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
          outputs: type=docker,dest=/tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp/${{ env.ARTIFACT_NAME }}.tar

  test:
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Run test
        run: |
          docker run --rm --name ansible-test -v $(pwd)/test/:/tmp/ \
          ${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} \
          /bin/sh -c "sh /tmp/ansible-test.sh"

  vulnerability-scan:
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Check out result-of-vulneralibity-scan repository code
        uses: actions/checkout@v2
        with:
          repository: "devdarkdevops/${{ env.GIT_REPO_NAME }}"
          path: ${{ env.GIT_REPO_NAME }}
          fetch-depth: "1"
          ssh-key: "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Download artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Install trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.deb
          sudo dpkg -i trivy_${TRIVY_VERSION}_Linux-64bit.deb

      - name: Run Trivy vulnerability scanner
        run: |
          trivy image --format template --template "@contrib/html.tpl" -o ansible-docker-${{ env.TAG_NAME }}.html ${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}

      - name: Push
        run: |
          TRIVY_REPORT_FILE_NAME=$(ls ansible-docker-*)

          if [[ ! -f "${{ env.GIT_REPO_NAME }}/${TRIVY_REPORT_FILE_PATH}/ansible-docker-${{ env.TAG_NAME }}.html" ]]; then
            INSERT_LINE_NUMBER=$(grep -no "Ansible-Ipsun" ./${{ env.GIT_REPO_NAME }}/index.html | cut -d':' -f1)
            TRIVY_REPORT_LINK="<li><a href=\"${TRIVY_REPORT_FILE_PATH}/${TRIVY_REPORT_FILE_NAME}\">${TRIVY_REPORT_FILE_NAME}</a></li>"

            sed -i "${INSERT_LINE_NUMBER} i ${TRIVY_REPORT_LINK}" ./${{ env.GIT_REPO_NAME }}/index.html
          fi

          cp -L ./${TRIVY_REPORT_FILE_NAME} ./${{ env.GIT_REPO_NAME }}/${TRIVY_REPORT_FILE_PATH}

          cd ${{ env.GIT_REPO_NAME }}
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add --all
          git commit -m "Add ${TRIVY_REPORT_FILE_NAME} report file"
          git push

  deploy:
    needs: vulnerability-Scan
    runs-on: ubuntu-20.04
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: /tmp

      - name: Load image
        run: |
          docker load --input /tmp/${{ env.ARTIFACT_NAME }}.tar

      - name: Upload Docker image
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }}
